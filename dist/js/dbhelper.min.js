
"use strict";class DBHelper{static get BASE_URL(){const port=1337;return`http://localhost:${port}/`;}
static get REVIEWS_URL(){return`${this.BASE_URL}reviews/`;}
static get RESTAURANTS_URL(){return`${this.BASE_URL}restaurants/`;}
static fetchRestaurants(){return new Promise((resolve,reject)=>{this._fetchObject(this.RESTAURANTS_URL).then(restaurants=>{resolve(restaurants);}).catch(error=>{reject(error);});});}
static fetchRestaurantById(restaurant_id){return new Promise((resolve,reject)=>{this._fetchObject(this.RESTAURANTS_URL,restaurant_id).then(restaurant=>{resolve(restaurant);}).catch(error=>{reject(error);});});}
static fetchReviewsById(restaurant_id){return new Promise((resolve,reject)=>{this._fetchObject(`${this.REVIEWS_URL}?restaurant_id=${restaurant_id}`).then(reviews=>{resolve(reviews);}).catch(error=>{reject(error);});});}
static fetchNeighborhoods(){return new Promise((resolve,reject)=>{this.fetchRestaurants().then(restaurants=>{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);resolve(uniqueNeighborhoods);}).catch(error=>{reject(error);});});}
static fetchCuisines(){return new Promise((resolve,reject)=>{this.fetchRestaurants().then(restaurants=>{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);resolve(uniqueCuisines);}).catch(error=>{reject(error);});});}
static fetchRestaurantByCuisine(cuisine){return new Promise((resolve,reject)=>{this.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.cuisine_type==cuisine);resolve(results);}).catch(error=>{reject(error);});});}
static fetchRestaurantByNeighborhood(neighborhood){return new Promise((resolve,reject)=>{this.fetchRestaurants().then(restaurants=>{const results=restaurants.filter(r=>r.neighborhood==neighborhood);resolve(results);}).catch(error=>{reject(error);});});}
static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood){return new Promise((resolve,reject)=>{this.fetchRestaurants().then(restaurants=>{let results=restaurants;if(cuisine!="all"){results=results.filter(r=>r.cuisine_type==cuisine);}
if(neighborhood!="all"){results=results.filter(r=>r.neighborhood==neighborhood);}
resolve(results);}).catch(error=>{reject(error);});});}
static _fetchObject(url,id=null){return new Promise((resolve,reject)=>{let completeUrl=url;if(id){completeUrl+=id;}
var headers=new Headers();headers.append("Content-Type","application/json");var init={method:"GET",headers:headers};fetch(completeUrl,init).then(response=>{return response.json();}).then(data=>{resolve(data);}).catch(error=>{reject(error);});});}
static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`;}
static mapMarkerForRestaurant(restaurant,map,animation=google.maps.Animation.DROP){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:animation});return marker;}
static imgSrcForRestaurant(restaurant){if(restaurant.photograph){return`./img/${restaurant.photograph}.jpg`;}else{return"./img/restaurant-placeholder.jpg";}}
static favRestaurant(id){axios.post(`${this.RESTAURANTS_URL}${id}/?is_favorite=true`).then(function(response){console.log(`restaurant with id ${id} faved`,response);}).catch(function(error){console.log("error during post",error);});}
static postReview(id,name,rating,comments){let reviewCreated={restaurant_id:id,name:name,rating:rating,comments:comments};axios.post(this.REVIEWS_URL,reviewCreated).then(function(response){console.log(`${name} your review was successfully posted`,response);}).catch(function(error){if(error){DBHelper.addReviewToDb(reviewCreated);console.log("review added to database. Will be posted when online");}
console.log(error);});}
static unfavRestaurant(id){axios.post(`${this.RESTAURANTS_URL}${id}/?is_favorite=false`).then(function(response){console.log(`restaurant with id ${id} unfaved`,response);}).catch(function(error){console.log("error during post",error);});}
static thumbSrcForRestaurant(restaurant){if(restaurant.id){return`./img/${restaurant.id}-thumb.jpg`;}else{return"./img/restaurant-placeholder-thumb.jpg";}}
static get DB_NAME(){return"restaurants-db";}
static get DB_VERSION(){return 1;}
static get DB_RESTAURANT_STORE_NAME(){return"restaurants";}
static get DB_REVIEW_STORE_NAME(){return"reviews";}
static get dbPromise(){return idb.open(this.DB_NAME,this.DB_VERSION,upgradeDb=>{switch(upgradeDb.oldVersion){case 0:upgradeDb.createObjectStore(this.DB_RESTAURANT_STORE_NAME);case 1:upgradeDb.createObjectStore(this.DB_REVIEW_STORE_NAME,{keyPath:"name"});}});}
static addRestaurantToDb(restaurant){this.dbPromise.then(db=>{const tx=db.transaction(this.DB_RESTAURANT_STORE_NAME,"readwrite");const store=tx.objectStore(this.DB_RESTAURANT_STORE_NAME);store.put(restaurant,restaurant.id);return tx.complete;});}
static addReviewToDb(review){this.dbPromise.then(db=>{const tx=db.transaction(this.DB_REVIEW_STORE_NAME,"readwrite");const store=tx.objectStore(this.DB_REVIEW_STORE_NAME);store.put(review);return tx.complete;});}
static removeReviewFromDb(review){this.dbPromise.then(db=>{const tx=db.transaction(this.DB_REVIEW_STORE_NAME,"readwrite");const store=tx.objectStore(this.DB_REVIEW_STORE_NAME);store.delete(review.name);return tx.complete;});}
static getReviewsFromDb(){return new Promise((resolve,reject)=>{this.dbPromise.then(db=>{const tx=db.transaction(this.DB_REVIEW_STORE_NAME);const store=tx.objectStore(this.DB_REVIEW_STORE_NAME);console.log(store.getAll());return store.getAll();}).then(reviews=>{resolve(reviews);}).catch(error=>{reject(error);});});}
static addRestaurantsToDb(restaurants){this.dbPromise.then(db=>{const tx=db.transaction(this.DB_RESTAURANT_STORE_NAME,"readwrite");const store=tx.objectStore(this.DB_RESTAURANT_STORE_NAME);restaurants.map(restaurant=>store.put(restaurant,restaurant.id));return tx.complete;});}
static getRestaurantsFromDb(){return new Promise((resolve,reject)=>{this.dbPromise.then(db=>{const tx=db.transaction(this.DB_RESTAURANT_STORE_NAME);const store=tx.objectStore(this.DB_RESTAURANT_STORE_NAME);return store.getAll();}).then(restaurants=>{resolve(restaurants);}).catch(error=>{reject(error);});});}
static getRestaurantFromDb(restaurant_id){return new Promise((resolve,reject)=>{this.dbPromise.then(db=>{const tx=db.transaction(this.DB_RESTAURANT_STORE_NAME);const store=tx.objectStore(this.DB_RESTAURANT_STORE_NAME);return store.get(restaurant_id);}).then(restaurant=>{resolve(restaurant);}).catch(error=>{reject(error);});});}
static registerServiceWorker(){if(!navigator.serviceWorker){return;}
navigator.serviceWorker.register("/sw.min.js").then(()=>{console.log("Service worker registered!");}).catch(error=>{console.error(`Service worker registration failed, ${error}`);});}}
DBHelper.registerServiceWorker();